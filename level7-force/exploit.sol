pragma solidity ^0.6.0;



contract ForceExploit {
    address public owner;

    constructor() public {
        owner = msg.sender;
    }

    function showBalance() public view returns (uint256) {
        return address(this).balance;
    }

    function close(address _dest) public {
        address payable addr = payable(address(_dest));
        selfdestruct(addr);
    }

    mapping(address => uint) public balanceReceived;

    function receiveMoney() public payable {
        assert(balanceReceived[msg.sender] + msg.value >= balanceReceived[msg.sender]);
        balanceReceived[msg.sender] += msg.value;
    }

    function withdrawMoney(address payable _to, uint _amount) public {
        require(_amount <= balanceReceived[msg.sender], "not enough funds.");
        assert(balanceReceived[msg.sender] >= balanceReceived[msg.sender] - _amount);
        balanceReceived[msg.sender] -= _amount;
        _to.transfer(_amount);
    } 

    receive() external payable {
        receiveMoney();
    }
}